/*: # Learning Swift
 
 # Table of Contents
 
 * [Simple Variables] (Simple Variable)
 * [Control Flow] (Control Flow)
 

 - Author:
 Ryan T
 # Overview
 Working through apples introduction to Swift
 https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html
 */


import Cocoa
//var is for variables
var str = "Hello, playground"
//use let to set constants
let str2 = "Goodbye, playground"
//variables and constants must have the same type as you assign
let implicitInteger = 70
let implicitDouble = 70.0
let explicitDouble: Double = 70.0
let explicitFloat: Float = 4.0
//values are never implicitly converted to another type
let label = "The width is "
let width = 94
let widthLabel = label + String(width)
//strings can include values by using backslah (\)
let apples = 3
let oranges = 5
let appleSummary = "I have \(apples) apples"
let fruitSummary = "I have \(apples + oranges) pieces of fruit"
// """ is used for strings that use multiple lines
let quotation = """
I said "I have \(apples) apples."
And then I said "I have \(apples + oranges) pieces of fruit."
"""
//arrays and dicts use brckets ([])
//access with index or key in brackets
var shoppingList = ["catfish", "water", "tulips", "blue paint"]
shoppingList[1] = "bottle of water"

var occupations = [
    "Mary": "Student",
    "Victoria": "Social Worker",
]
occupations["Marcus"] = "Photographer"
//create an empty array or dictionary with explicit implementation
let emptyArray = [String]()
let emptyDictionary = [String: Float]()
//if type can be inferred you dont need to state type
shoppingList = []
occupations = [:]
//if and switch for conditionals, for-in, while and repeat-while for loops
//parenthesis around condition are optional, braces are manditoy
let individualScoers = [75, 43, 103, 87, 12]
var teamScore = 0
for score in individualScoers {
    if score > 50 {
        teamScore += 3 //can increment with +=
    } else {
        teamScore += 1
    }
}
print(teamScore)
//if and let can be used together for values that could be missing
//an optional value contains nil or a value and os followed by ? after the type
var optionalString: String? = "Hello"
print(optionalString == nil)

var optionalName: String? = "John Appleseed"//if changed to nil greeting is tripped below
var greeting = "Hello"
if let name = optionalName {
    greeting = "Hello, \(name)"
}
//can also handle optional values using ?? to give a default value
let nickName: String? = nil
let fullName: String = "John Appleseed"
let informalGreeting = "Hi \(nickName ?? fullName)"
//switches support any kind of data and a variety of comparison, not just ints
let vegetable = "red pepper"
switch vegetable {
case "celery":
    print("Add some raisins and make ants on a log.")
case "cucumber", "watercress":
    print("That would make a good tea sandwich.")
case let x where x.hasSuffix("pepper"):
    print("Is it spicy \(x)?")
default:
    print("Everything tastes good in soup.")
}
//use for-in to iterate over items in a dictionary by providing a pair of names
//to use for each key-value pair
let interestingNumbers = [
    "Prime": [2,3,5,7,11,13],
    "Fibonacci": [1,1,2,3,5,8],
    "Square": [1,4,9,16,25],

]

var largest = 0
for (kind, numbers) in interestingNumbers {
    print(kind)//to stop error of not using kind
    for number in numbers {
        if number > largest {
            largest = number
        }
    }
}
print(largest)

//use while to repeat a block of code until a conditon changes
var n = 2
while n < 100 {
    n += 2
}
print(n)
//use repeat to execute code first
var m = 2
repeat {
    m += 2
} while m < 100
print(m)
//keep index in a loop by using ..< to make a range
var total = 0
for i in 0..<4 {
    total += i
}
print(total)

//FUNCTIONS AND CLOSURES
//use func to declare a function
//call a function by following its name with a list of arguments in parenthesis
//use -> to seperate the parameter names and types from the functions return type
func greet(person: String, day: String) -> String {
    return "Hello \(person). today is \(day)."
}
greet(person: "Bob", day: "Tuesday")
//you can use _ to not have to use an argument label
//use a word before the parameter to set a custom label name
func greet(_ person: String, on day: String) -> String{
    return "Hello \(person), today is \(day)."
}
greet("John", on: "Wednesday")

//a tuple can be used to return multiple values from a function
func calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {
    var min = scores[0]
    var max = scores[0]
    var sum = 0
    
    for score in scores {
        if score > max {
            max = score
        }else if score < min {
            min = score
        }
        sum += score
    }
    return (min, max, sum)
}

let statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])
print(statistics.sum)
print(statistics.2)

//nested functions are possible
//nested functions have access to variables that were declared in the outer function
func returnFifteen() -> Int {
    var y = 10
    func add() {
        y += 5
    }
    add()
    return y
}
returnFifteen()

//a function is a first-class type, this means a function can return another function
func makeIncrementer() -> ((Int) -> Int) {
    func addOne(number: Int) -> Int{
        return 1 + number
    }
    return addOne
}
var increment = makeIncrementer()
increment(7)

//a function can take another function as one of its arguments
func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {
    for item in list {
        if condition(item) {
            return true
        }
    }
    return false
}
func lessThanTen(number: Int) -> Bool {
    return number < 10
}
var numbers = [20, 19, 7, 12]
hasAnyMatches(list: numbers, condition: lessThanTen)
//functions have access to variables and functions available in scope when created
//closures can be created without a name by surrounding code with ({})
//use in to seperate the arguments and return the type from the body
numbers.map({(number: Int) -> Int in
    let result = 3 * number
    return result
})
//single statement closures implicitly return the value of their only statement
let mappedNumbers = numbers.map({number in 3 * number})
print(mappedNumbers)
//parameters can be reffered to by number instead of by name
let sortedNumbers = numbers.sorted { $0 > $1}
print(sortedNumbers)
//OBJECTS AND CLASSES
//use calss followed by the classes name to create a class
class Shape {
    var numberOfSides = 0
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides."
    }
}
//create an instance of a class by puttingn parenthesis after the class name
//use dot notation to access properties and methods
var shape = Shape()
shape.numberOfSides = 7
var shapeDescription = shape.simpleDescription()
//use init to create an initializer
class NamedShape {
    var numberOfSides: Int = 0
    var name: String
    
    init(name: String) {
        self.name = name
    }
    
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides."
    }
}
//use deinit to destroy an object for cleanup
//subclasses include their superclass name after a colon
//methods on a subclass that override the subclasses implementation are marked with override
class Square: NamedShape {
    var sideLength: Double
    
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 4
    }
    
    func area() -> Double {
        return sideLength * sideLength
    }
    
    override func simpleDescription() -> String {
        return "A square with sides of length \(sideLength)."
    }
}
let test = Square(sideLength: 5.2, name: "my test square")
test.area()
test.simpleDescription()
//properties can have getters and setters as well
class EquilateralTriangle: NamedShape {
    var sideLength: Double = 0.0
    
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 3
    }
    
    var perimeter: Double {
        get {
            return 3.0 * sideLength
        }
        set {
            sideLength = newValue / 3.0
        }
    }
    
    override func simpleDescription() -> String {
        return "An equilateral triangle with sides of length \(sideLength)."
    }
}
var triangle = EquilateralTriangle(sideLength: 3.1, name: "A Triangle")
print(triangle.perimeter)
triangle.perimeter = 9.9
print(triangle.sideLength)
//in the setter newValue represents the value being sent in
//use willSet and didSet to run code anytime a value is changed outside the initializer
class TriangleAndSquare {
    var triangle: EquilateralTriangle {
        willSet{
            square.sideLength = newValue.sideLength
        }
    }
    var square: Square {
        willSet {
            triangle.sideLength = newValue.sideLength
        }
    }
    init(size: Double, name:String) {
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
    }
}
var triangleAndSquare = TriangleAndSquare(size: 10, name: "Another test shape")
print(triangleAndSquare.square.sideLength)
print(triangleAndSquare.triangle.sideLength)
triangleAndSquare.square = Square(sideLength: 50, name: "Larger Square")
print(triangleAndSquare.triangle.sideLength)
//when using optional values ? can be used before methods, properties and subscripting
//if the value before ? is nil then everything after is ignored, if not the following code is unwrapped
let optionalSquare: Square? = Square(sideLength: 2.5, name: "Optional Square")
let sideLength = optionalSquare?.sideLength
//ENUMERATIONS AND STRUCTURES
//use enum to create and enumeration
enum Rank: Int {
    case ace = 1
    case two, three, four, five, six, seven, eight, nine, ten
    case jack, queen, king
    func simpleDescription() -> String {
        switch self {
        case .ace:
            return "ace"
        case .jack:
            return "jack"
        case .queen:
            return "queen"
        case .king:
            return "king"
        default:
            return String(self.rawValue)
        
        }
    }
}
let ace = Rank.ace
let aceRawValue = ace.rawValue
//by default swift assigns raw values starting at zero and incrementing by one
//you can change this by explicitly setting values, and can set to float or string as well
//use rawValue to acess properties of an enum
//---------------
//use init?(rawValue:) initializer to make an instance of an enum from a raw value
if let convertedRank = Rank(rawValue: 3) {
    let threeDescription = convertedRank.simpleDescription()
}
//the case  values of an enum are actual values
//cases where there isnt a meaningful raw value, you dont have to supply one
enum Suit {
    case spades, hearts, diamonds, clubs
    func simpleDescription() -> String {
        switch self {
        case .spades:
            return "spades"
        case .hearts:
            return "hearts"
        case .diamonds:
            return "diamonds"
        case .clubs:
            return "clubs"
        }
    }
    func color() -> String {
        switch self {
        case .spades, .clubs:
            return "black"
        case .hearts, .diamonds:
            return "red"
        }
    }
}
let hearts = Suit.hearts
let heartsDescription = hearts.simpleDescription()
print(hearts.color())
//enums can have values associated with a case
//these values are determined when you make the instance
enum ServerResponse {
    case result(String, String)
    case failure(String)
}


let success = ServerResponse.result("6:00 am", "8:09 pm")
let failure = ServerResponse.failure("Out of cheese.")

switch success {
case let .result(sunrise, sunset):
    print("Sunrise at \(sunrise) and sunset at \(sunset).")
case let .failure(message):
    print("Failure... \(message)")
}
//structs are possible as well
//structs act like classes with methods and initializers
//they are idfferent though because structs are copied when passed around but classes are passed by reference
struct Card {
    var rank: Rank
    var suit: Suit
    func simpleDescription() -> String {
        return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
    }
}
let threeOfSpades = Card(rank: .three, suit: .spades)
let threeOfSpadesDescription = threeOfSpades.simpleDescription()
//PROTOCOLS AND EXTENSIONS
//use protocol to declare a protocall
protocol ExampleProtocol {
    var simpleDescription: String { get }
    mutating func adjust()
}
//classes, enums and structs can all adopt protocols
class SimpleClass: ExampleProtocol {
    var simpleDescription: String = "A very simple class."
    var anotherProperty: Int = 69105
    func adjust() {
        simpleDescription += " Now 100% adjusted."
    }
}
var a = SimpleClass()
a.adjust()
let aDescription = a.simpleDescription

struct SimpleStructure: ExampleProtocol {
    var simpleDescription: String = "A very simple struct"
    mutating func adjust() {
        simpleDescription += " (adjusted)"
    }
}
var b = SimpleStructure()
b.adjust()
let bDescription = b.simpleDescription

//mutating keyword is used to mark a method that modifies the structure
//---------------------
//use extensions to add functionality to an existing type, like methods or properties
extension Int: ExampleProtocol {
    var simpleDescription: String {
        return "The number \(self)"
    }
    mutating func adjust() {
        self += 42
    }
}
print(7.simpleDescription)
//protocol names can be used like any other named type
let protocolValue: ExampleProtocol = a
print(protocolValue.simpleDescription)
//print(protocolValue.anotherProperty) this errors
//ERROR HANDLING
//you represent errors using any type that adopts the Error protocol
enum PrinterError: Error {
    case outOfPaper
    case noToner
    case onFire
}
//use throw to throw  an error and throws to mark a function that can throw an error
func send(job: Int, toPrinter printerName: String) throws -> String {
    if printerName == "Never Has Toner" {
        throw PrinterError.noToner
    }
    return "Job Sent"
}
//errors can be handled with a do-catch
//in a do-catch you mark code that can throw a code by placing a try in front of it
//inside the catch block the error is given the name error automatically unless you change it
do{
    let printerResponse = try send(job: 1040, toPrinter: "Bi Sheng")
    print(printerResponse)
} catch {
    print(error)
}
//multiple catch blocks can be provided that hadle specific errors
//you write a pattern after catch just as you do after case in a switch
do {
    let printerResponse = try send(job: 1040, toPrinter: "Gutenberg")
    print(printerResponse)
} catch PrinterError.onFire {
    print("I'll just put this over here, with the rest of the fire.")
} catch let printerError as PrinterError {
    print("Printer error: \(printerError).")
} catch {
    print(error)
}

//another way to handle errors is to use try? to convert the result to an optional.
//if the functon throws an error the specific error is discarded and the result is nil
//otherwise the result is an optional containing the value of the function returned
let printerSuccess = try? send(job: 1884, toPrinter: "Mergenthaler")
let printFailure = try? send(job: 1885, toPrinter: "Never Has Toner")

//use defer to write a block of code that is executed after all other code in the function,  before the function returns
//this code is ran regardless if there was an error
var fridgeIsOpen = false
let fridgeContent = ["milk", "eggs", "leftovers"]

func fridgeContains(_ food: String) -> Bool {
    fridgeIsOpen = true
    defer {
        fridgeIsOpen = false
    }
    
    let result = fridgeContent.contains(food)
    return result
}
fridgeContains("banana")
print(fridgeIsOpen)

//GENERICS
//write a name inside angle brackets to make a generic function or type
func makeArray<Item>(repeating item: Item, numberOfTimes: Int) -> [Item] {
    var result = [Item]()
    for _ in 0..<numberOfTimes{
        result.append(item)
    }
    return result
}
makeArray(repeating: "knock", numberOfTimes: 4)

//you can make generic forms of functions and methods, as well as classes, enumerations and structures
//Reimplement the Swift standard library's optional type
enum OptionalValue<Wrapped> {
    case none
    case some(Wrapped)
}
var possibleInteger: OptionalValue<Int> = .none
possibleInteger = .some(100)

//use where right before the body to specify a list of requirements
func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool
    where T.Iterator.Element: Equatable, T.Iterator.Element == U.Iterator.Element {
        for lhsItem in lhs {
            for rhsItem in rhs {
                if lhsItem == rhsItem {
                    return true
                }
            }
        }
        return false
}
anyCommonElements([1,2,3], [3])
